{"version":3,"sources":["api/api.ts","components/User.tsx","components/Comment.tsx","components/CommentsList.tsx","components/Post.tsx","components/PostsList.tsx","App.tsx","index.tsx"],"names":["API_URL","getData","url","a","fetch","response","json","data","getPrepearedPosts","Promise","all","posts","comments","users","PrepearedPosts","map","post","user","find","id","userId","filter","comment","postId","User","name","email","address","city","street","suite","Comment","className","body","CommentsList","key","Post","title","PostsList","onChange","inputValue","htmlFor","type","value","placeholder","App","useState","setPosts","isLoading","setLoading","query","setQuery","loadHandler","listOfPosts","filteredPosts","useMemo","toLowerCase","includes","trim","length","event","target","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bdb029c4.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com/';\n\nconst getData = async (url: string) => {\n  const response =  await fetch(url);\n  const data = await response.json();\n\n  return data;\n};\n\nexport const getPrepearedPosts = async (): Promise<PostWithUser[]> => {\n  const [\n    posts,\n    comments,\n    users,\n  ] = await Promise.all([\n    getData(`${API_URL}posts`),\n    getData(`${API_URL}comments`),\n    getData(`${API_URL}users`),\n  ]);\n\n  const PrepearedPosts = posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }));\n\n  return PrepearedPosts;\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n\n  return (\n    <>\n      <h3>{`Posted by: ${name}`}</h3>\n      <p>\n        {`Email: ${email}.\n         Address: ${address.city}\n         ${address.street} ${address.suite}`}\n      </p>\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => (\n  <li className=\"list-group-item list-group-item-primary\">\n    <p>{`Comment: ${comment.name}`}</p>\n    <p>{comment.body}</p>\n    <p>{comment.email}</p>\n  </li>\n);\n","import React, { FC } from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentsList: FC<Props> = ({ comments }) => (\n  <ul className=\"list-group\">\n    {comments.map(comment => (\n      <Comment key={comment.id} comment={comment} />\n    ))}\n  </ul>\n);\n","import React, { FC } from 'react';\nimport { User } from './User';\nimport { CommentsList } from './CommentsList';\n\ninterface Props {\n  post: PostWithUser;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <li className=\"list-group-item list-group-item-success\">\n      <h2>\n        {title}\n      </h2>\n      <p>{body}</p>\n      <User user={user} />\n      <CommentsList comments={comments} />\n    </li>\n  );\n};\n","import React, { FC, ChangeEvent } from 'react';\nimport { Post } from './Post';\n\ninterface Props {\n  posts: PostWithUser[];\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  inputValue: string;\n}\n\nexport const PostsList: FC<Props> = ({ posts, onChange, inputValue }) => (\n  <>\n    <form className=\"form\">\n      <div className=\"form-group\">\n        <label htmlFor=\"filter\">\n          Filter by:\n          <br />\n          <input\n            id=\"filter\"\n            className=\"form-control\"\n            name=\"filter\"\n            type=\"text\"\n            value={inputValue}\n            onChange={onChange}\n            placeholder=\"enter word ...\"\n          />\n        </label>\n      </div>\n    </form>\n    <ul className=\"list-group\">\n      {posts.map(post => (\n        <Post key={post.id} post={post} />\n      ))}\n    </ul>\n  </>\n);\n","import React, {\n  FC,\n  useState,\n  ChangeEvent,\n  useMemo,\n} from 'react';\nimport { getPrepearedPosts } from './api/api';\nimport { PostsList } from './components/PostsList';\nimport './App.css';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<PostWithUser[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const loadHandler = async () => {\n    setLoading(true);\n    const listOfPosts = await getPrepearedPosts();\n\n    setPosts(listOfPosts);\n    setLoading(false);\n  };\n\n  const changeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const filteredPosts = useMemo(() => posts.filter(post => {\n    return post.title.toLowerCase().includes(query.trim().toLowerCase())\n      || post.body.toLowerCase().includes(query.trim().toLowerCase());\n  }), [query, posts]);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"heading\">Dynamic list of posts</h1>\n      {posts.length\n        ? (\n          <PostsList\n            posts={filteredPosts}\n            onChange={changeHandler}\n            inputValue={query}\n          />\n        )\n        : (\n          <div className=\"btn-container\">\n            <button\n              type=\"button\"\n              className=\"btn btn-success\"\n              onClick={loadHandler}\n              disabled={isLoading}\n            >\n              {isLoading\n                ? 'Loading...'\n                : 'Load Posts'}\n            </button>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}