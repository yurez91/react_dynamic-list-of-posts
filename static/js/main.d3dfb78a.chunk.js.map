{"version":3,"sources":["api/api.ts","components/User.tsx","components/Comment.tsx","components/CommentsList.tsx","components/Post.tsx","components/PostsList.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getData","url","fetch","then","response","json","getPrepearedPosts","a","postsUrl","posts","commentUrl","comments","usersUrl","users","PrepearedPosts","map","post","user","find","id","userId","filter","comment","postId","User","name","email","address","city","street","suite","Comment","className","body","CommentsList","key","Post","title","PostsList","onChange","inputValue","htmlFor","type","value","placeholder","App","useState","setPosts","isLoading","setLoading","query","setQuery","loadHandler","listOfPosts","filteredPosts","useMemo","toLowerCase","includes","trim","length","event","target","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3dfb78a.chunk.js","sourcesContent":["const BASE_URL = 'https://jsonplaceholder.typicode.com/';\nconst POSTS_URL = 'posts';\nconst USERS_URL = 'users';\nconst COMMENTS_URL = 'comments';\n\nconst getData = <T>(url: string): Promise<T> => {\n  return fetch(url)\n    .then(response => response.json());\n};\n\nconst getPosts = (postsUrl: string): Promise<Post[]> => {\n  return getData(`${BASE_URL}${postsUrl}`);\n};\n\nconst getComments = (commentUrl: string): Promise<Comment[]> => {\n  return getData(`${BASE_URL}${commentUrl}`);\n};\n\nconst getUsers = (usersUrl: string): Promise<User[]> => {\n  return getData(`${BASE_URL}${usersUrl}`);\n};\n\nexport const getPrepearedPosts = async (): Promise<PostWithUser[]> => {\n  const posts = await getPosts(POSTS_URL);\n  const comments = await getComments(COMMENTS_URL);\n  const users = await getUsers(USERS_URL);\n  const PrepearedPosts = posts.map(post => ({\n    ...post,\n    user: users.find(user => user.id === post.userId) as User,\n    comments: comments.filter(comment => comment.postId === post.id),\n  }));\n\n  return PrepearedPosts;\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n\n  return (\n    <>\n      <h3>{`Posted by: ${name}`}</h3>\n      <p>\n        {`Email: ${email}.\n         Address: ${address.city}\n         ${address.street} ${address.suite}`}\n      </p>\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => (\n  <li className=\"list-group-item list-group-item-primary\">\n    <p>{`Comment: ${comment.name}`}</p>\n    <p>{comment.body}</p>\n    <p>{comment.email}</p>\n  </li>\n);\n","import React, { FC } from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentsList: FC<Props> = ({ comments }) => (\n  <ul className=\"list-group\">\n    {comments.map(comment => (\n      <Comment key={comment.id} comment={comment} />\n    ))}\n  </ul>\n);\n","import React, { FC } from 'react';\nimport { User } from './User';\nimport { CommentsList } from './CommentsList';\n\ninterface Props {\n  post: PostWithUser;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <li className=\"list-group-item list-group-item-success\">\n      <h2>\n        {title}\n      </h2>\n      <p>{body}</p>\n      <User user={user} />\n      <CommentsList comments={comments} />\n    </li>\n  );\n};\n","import React, { FC, ChangeEvent } from 'react';\nimport { Post } from './Post';\n\ninterface Props {\n  posts: PostWithUser[];\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  inputValue: string;\n}\n\nexport const PostsList: FC<Props> = ({ posts, onChange, inputValue }) => (\n  <>\n    <form className=\"form\">\n      <div className=\"form-group\">\n        <label htmlFor=\"filter\">\n          Filter by:\n          <br />\n          <input\n            id=\"filter\"\n            className=\"form-control\"\n            name=\"filter\"\n            type=\"text\"\n            value={inputValue}\n            onChange={onChange}\n            placeholder=\"enter word ...\"\n          />\n        </label>\n      </div>\n    </form>\n    <ul className=\"list-group\">\n      {posts.map(post => (\n        <Post key={post.id} post={post} />\n      ))}\n    </ul>\n  </>\n);\n","import React, {\n  FC,\n  useState,\n  ChangeEvent,\n  useMemo,\n} from 'react';\nimport { getPrepearedPosts } from './api/api';\nimport { PostsList } from './components/PostsList';\nimport './App.css';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<PostWithUser[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const loadHandler = async () => {\n    setLoading(true);\n    const listOfPosts = await getPrepearedPosts();\n\n    setPosts(listOfPosts);\n    setLoading(false);\n  };\n\n  const changeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const filteredPosts = useMemo(() => posts.filter(post => {\n    return post.title.toLowerCase().includes(query.trim().toLowerCase())\n      || post.body.toLowerCase().includes(query.trim().toLowerCase());\n  }), [query, posts]);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"heading\">Dynamic list of posts</h1>\n      {posts.length\n        ? (\n          <PostsList\n            posts={filteredPosts}\n            onChange={changeHandler}\n            inputValue={query}\n          />\n        )\n        : (\n          <div className=\"btn-container\">\n            <button\n              type=\"button\"\n              className=\"btn btn-success\"\n              onClick={loadHandler}\n              disabled={isLoading}\n            >\n              {isLoading\n                ? 'Loading...'\n                : 'Load Posts'}\n            </button>\n          </div>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}